openapi: 3.0.0
info:
  title: Task Management API
  description: API for managing tasks with real-time updates and authentication.
  version: 1.0.0

servers:
  - url: http://localhost:4000
    description: Local server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Task:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, completed]
        timestamp:
          type: string
          format: date-time

    User:
      type: object
      properties:
        password:
          type: string
        username:
          type: string
        email:
          type: string

paths:
  /tasks:
    get:
      summary: Retrieve a list of tasks
      description: Retrieves a list of tasks for the authenticated user.
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

    post:
      summary: Create a new task
      description: Creates a new task for the authenticated user.
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        201:
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

  /tasks/{id}:
    put:
      summary: Update an existing task
      description: Updates an existing task by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The task ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        200:
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"

    get:
      summary: Get a task by ID
      description: Retrieves a task by its ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The task ID
      responses:
        200:
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        404:
          description: Task not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      summary: Delete a task
      description: Deletes a task by ID.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The task ID
      responses:
        200:
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/signup:
    post:
      summary: Sign up a new user
      description: Registers a new user and returns a JWT token.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/login:
    post:
      summary: Log in a user
      description: Logs in a user and returns a JWT token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "manish@gmail.com"
                password:
                  type: string
                  example: "manish"
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
